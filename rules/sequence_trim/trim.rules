# -*- mode: Snakemake -*-
# Sequence Trimming Rules

rule seq_trim_R1:
  input:
    RUN_DIR + "/processData/{sample}.R1.fastq.gz"
  output:
    temp(RUN_DIR + "/processData/{sample}.R1.trim.fastq.gz")
  params:
    tool=ROOT_DIR + "/tools/seqTrimR/seqTrim.R",
    lead=lambda wildcards: R1_LEAD[wildcards.sample],
    over=lambda wildcards: R1_OVER[wildcards.sample],
    leadMis=config["R1leadMismatch"],
    overMis=config["R1overMismatch"],
    overLen=config["R1overMaxLength"]
  log:
    RUN_DIR + "/logs/{sample}.R1.trim.log"
  shell:
    """
    Rscript {params.tool} {input} -o {output} \
      -l {params.lead} --leadMisMatch {params.leadMis} \
      -r {params.over} --overMisMatch {params.overMis} \
      --overMaxLength {params.overLen} --compress > {log} 2>&1
    """

rule seq_trim_R2_primer:
  input:
    RUN_DIR + "/processData/{sample}.R2.fastq.gz"
  output:
    temp(RUN_DIR + "/processData/{sample}.R2.primer.trim.fastq.gz")
  params:
    lead=lambda wildcards: R2_LEAD[wildcards.sample],
    over=lambda wildcards: R2_OVER[wildcards.sample],
    leadMis=config["R2leadMismatch"],
    overMis=config["R2overMismatch"],
    overLen=config["R2overMaxLength"]
  log:
    RUN_DIR + "/logs/{sample}.R2.primer.trim.log"
  shell:
    """
    TOOL="{ROOT_DIR}/tools/seqTrimR/seqTrim.R"
    Rscript ${{TOOL}} {input} -o {output} \
      -l {params.lead} --leadMisMatch {params.leadMis} \
      -r {params.over} --overMisMatch {params.overMis} \
      --overMaxLength {params.overLen} --compress > {log} 2>&1
    """

rule seq_trim_R2_odn:
  input:
    RUN_DIR + "/processData/{sample}.R2.primer.trim.fastq.gz"
  output:
    temp(RUN_DIR + "/processData/{sample}.R2.trim.fastq.gz")
  params:
    lead=lambda wildcards: R2_LEAD_ODN[wildcards.sample],
    leadMis=config["R2leadMismatch"]
  log:
    RUN_DIR + "/logs/{sample}.R2.odn.trim.log"
  shell:
    """
    TOOL="{ROOT_DIR}/tools/seqTrimR/seqTrim.R"
    Rscript ${{TOOL}} {input} -o {output} \
      -l {params.lead} --leadMisMatch {params.leadMis} \
      --noQualTrimming --compress > {log} 2>&1
    """
