# iGUIDE : Improved Genome-wide Unbiased Identification of Double-strand DNA brEaks
# Additional Snakefile for processing samples with higher levels of parallelization
#
# Author : Christopher Nobles, Ph.D.
# useful modules sys, os, csv

import os
import sys
import re
import yaml
import configparser
from tools.pytools.defs import *

# Working paths
RUN = config["Run_Name"]
ROOT_DIR = config["Install_Directory"]
RUN_DIR = config["Install_Directory"] + "/analysis/" + RUN

# Import sampleInfo
if ".csv" in config["Sample_Info"]:
    delim = ","
elif ".tsv" in config["Sample_Info"]:
    delim = "\t"
else:
    raise SystemExit("Sample Info file needs to contain extention '.csv' or '.tsv'.")

sampleInfo = import_sample_info(
    config["Sample_Info"], config["Sample_Name_Column"], delim)

# Configuration
ROOT_DIR = "/home/cnobles/iGUIDE"
SAMPLE_PATH = ROOT_DIR + "/analysis/iGUIDE_Set0/processData/GSSP0004-neg"
SPECIMEN = "GSSP0004-neg"
REPS = [1, 2, 3, 4]
NUM_CHUNKS = 50
CHUNKS = ["chunk%02d" % i for i in range(1,NUM_CHUNKS+1)]

SAMPLES=sampleInfo[config["Sample_Name_Column"]]
TYPES=config["Read_Types"]
READS=config["Genomic_Reads"]
R1_LEAD=choose_sequence_data(config["R1_Leading_Trim"], sampleInfo)
R1_OVER=choose_sequence_data(config["R1_Overreading_Trim"], sampleInfo)
R2_LEAD=choose_sequence_data(config["R2_Leading_Trim"], sampleInfo)
R2_LEAD_ODN=choose_sequence_data(config["R2_Leading_Trim_ODN"], sampleInfo)
R2_OVER=choose_sequence_data(config["R2_Overreading_Trim"], sampleInfo)

READ_TYPES = ["R1", "R2"]
REF_GENOME = "hg38"
REF_GENOME_2BIT = ROOT_DIR + "/genomes/" + REF_GENOME + ".2bit"

wildcard_constraints:
  sample="GSSP\d{4}-\w{3}-\d",
  read="R\d",
  chunk="chunk\d{2}"
  
# Target Rule
rule all:
  input:
    sites=expand(RUN_DIR + "/output/uniqSites/GSSP0004-neg-{rep}.uniq.csv", rep = ["1", "2", "3", "4"]),
    umis=expand(RUN_DIR + "/processData/GSSP0004-neg-{rep}.umitags.fasta.gz", rep = ["1", "2", "3", "4"])

# Workflow Rules
include: "rules/demultiplex/demulti.rules"
include: "rules/sequence_trim/trim.rules"
if (config["UMItags"]):
    include: "rules/sequence_trim/umitag.rules"
    UMIseqs = sampleInfo["barcode2"]
include: "rules/filter/filt.rules"

rule make_chunk_dir:
  input: "configs/" + RUN + ".config.yml"
  output: SAMPLE_PATH
  shell: "mkdir {output}"

rule chunk_seqs:
  input: RUN_DIR + "/processData/{sample}.{read}.filt.fastq.gz"
  output: temp(expand(SAMPLE_PATH + "/{{sample}}.{{read}}.{chunk}.fastq.gz", chunk = CHUNKS))
  params:
    chunks=NUM_CHUNKS,
    outpath=SAMPLE_PATH
  shell:
    "Rscript tools/rtools/parse_input_seqs.R {input} {params.outpath} {params.chunks}"

rule consol:
  input: SAMPLE_PATH + "/{sample}.{read}.{chunk}.fastq.gz"
  output:
    consol=temp(SAMPLE_PATH + "/{sample}.{read}.{chunk}.consol.fasta"),
    key=temp(SAMPLE_PATH + "/{sample}.{read}.{chunk}.key.csv")
  shell:
    """
    TOOL="{ROOT_DIR}/tools/seqConsolidateR/seqConsolidate.R"
    Rscript ${{TOOL}} {input} -o {output.consol} -k {output.key}
    """

rule align:
  input:
    seq=SAMPLE_PATH + "/{sample}.{read}.{chunk}.consol.fasta",
    genome=ancient(REF_GENOME_2BIT)
  output:
    SAMPLE_PATH + "/{sample}.{read}.{chunk}.psl"
  params:
    "-tileSize=11 -stepSize=9 -minIdentity=85 -maxIntron=5 -minScore=27 -dots=1000 -out=psl -noHead"
  shell:
    "blat {input.genome} {input.seq} {output} {params}"

rule compress_align:
  input: SAMPLE_PATH + "/{sample}.{read}.{chunk}.psl"
  output: SAMPLE_PATH + "/{sample}.{read}.{chunk}.psl.gz"
  shell: "gzip {input}"

rule generate_2bit:
  input: REF_GENOME
  output: REF_GENOME_2BIT
  shell:
    "Rscript {ROOT_DIR}/tools/rtools/generate_2bit_genome.R {input} {output}"

rule post_align:
  input:
    sampleR1=SAMPLE_PATH + "/{sample}.R1.{chunk}.psl.gz",
    sampleR2=SAMPLE_PATH + "/{sample}.R2.{chunk}.psl.gz",
    keyR1=SAMPLE_PATH + "/{sample}.R1.{chunk}.key.csv",
    keyR2=SAMPLE_PATH + "/{sample}.R2.{chunk}.key.csv"
  output: temp(SAMPLE_PATH + "/{sample}.{chunk}.uniq.csv")
  params:
    ref=REF_GENOME,
    start=5,
    pct=95,
    minLen=30,
    maxLen=2500
  shell:
    """
    TOOL="{ROOT_DIR}/tools/blatCoupleR/blatCouple.R"
    Rscript ${{TOOL}} {input.sampleR2} {input.sampleR1} \
      -k {input.keyR2} {input.keyR1} \
      -o {output} \
      -g {params.ref} --maxAlignStart {params.start} --minPercentIdentity {params.pct} \
      --minTempLength {params.minLen} --maxTempLength {params.maxLen}
    """

rule combine:
  input: expand(SAMPLE_PATH + "/{{sample}}.{chunk}.uniq.csv", chunk = CHUNKS)
  output: SAMPLE_PATH + "/{sample}.uniq.csv"
  shell:
    """
    ls {input} | xargs head -n 1 -q | uniq > {output}
    cat {input} | sed '/seqnames/d' >> {output}
    """
